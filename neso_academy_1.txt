- ############### GUIDELINES FOR ASYMPTOTIC ANALYSIS PART 1

- #LOOPS
- CASE 1:
for(i=1;i<n;i++){

 //statement
}

- OUR TASK IS TO CALCULATE HOW MANY TIMES THE "//statement" HAD EXECUTED
- THEN WE CAN CALCULATE THE TIME COMPLEXITY

- LOOP EXECUTE n TIMES
- SO, THE TOTAL TIME IS = O(n)


- #NESTED LOOPS
- CASE 1:
for(i=1;i<n;i++){           //outer loop executes n times

 for(j=i;j<n;j++){          //inner loop executes n times

  //statement
 }
}

- SO, THE TOTAL TIME IS n x n = O(n^2)


- #CONSECUTIVE STATEMENTS
- CASE 1:
int x=2;                    |
int i;                      |these 3 executed 3 unit of times	 
x = x + 1;                  |

for(i=1;i<n;i++){           //this block executed n times

 //statements
}
for(i=1;i<n;i++){           //this block executed n^2 times

 for(j=i;j<n;j++){          

  //statement
 }
}

- TOTAL TIME = n^2 + n + 3 = O(n^2)

f(n) = n^2 + n + 3;   LET g(n) = n^2;

IS f(n) = O(g(n)) ?

f(n) <= c.g(n)

n^2 + n +3 <= c.n^2; Let's take c = 2
3 <= n^2 - n
3 <= n(n-1)
n >= 3 or n >= 4 

THIS MEANS
f(n) <= c.g(n)
when c = 2; n0 = 3

f(n) = O(n^2)  -> meaning linear growth


- ############### GUIDELINES FOR ASYMPTOTIC ANALYSIS PART 2

- #IF-ELSE STATEMENTS
scanf("%d",&n){

 if(n == 0){

  //statement
 }
 else{

  for(int i = 0; i < n; i++){

   //statements
  }
 }
}

- Worst case running time = Test + if part or else part (whichever is larger)

- for "if" part
- n == 0 takes constant time
- statement inside "if" also takes constant time
- Total time = 1 + 1 = O(1)

- for "else" part
- n == 0 takes constant time
- statement get executed n times
- Total time = 1 + n = O(n)

- Time complexity of code above is = O(n)
- Because the for statement takes the larger time


- ############### LOGARITHM COMPLEXITY

- LOGARITHM IS HOW MANY TIMES A PARTICULAR BASE HAS MULTIPLIED BY ITSELF
- IN ORDER TO OBTAIN THE VALUE UNDER CONSIDERATION
 
- log2(8) = 3
- THE ABOVE LOGARITHM SAID "HOW MANY TIMES FOR 2 TO BE MULTIPLIED AND GET THE VALUE OF 8?"

- LOGARITHMIC TIME COMPLEXITY IS ACHIEVED WHEN THE PROBLEM SIZE IS CUT DOWN BY A FRACTION
- LOGARITHMIC COMPLEXITY IS LESSER THAN THE LINEAR TIME COMPLEXITY

- TIME COMPLEXITY
- CASE 1:
for(i=0; i<n; i++){

 //statements
 i = i * 2;
}

- ITER 1; i=1; 2^0
- ITER 2; i=2; 2^1
- ITER 3; i=4; 2^2
- ITER 4; i=8; 2^3
- ITER k; i=n; 2^k-1

- n = 2^k-1
log 2 n = log 2 2^k-1
log 2 n = k-1
k = log 2 n + 1    -> SO, TIME COMPLEXITY = O(log 2 n)

- EXAMPLE:
for(i=1;i<32;i++){

 //statements
 i = i * 2
}

k = log 2 32 + 1
k = 5 + 1 = 6


- CASE 2:
for(i=n; i<1; i++){ 

 //statements
 i = i / 2;
}

- ITER 1; i=n/2^0
- ITER 2; i=n/2^1
- ITER 3; i=n/2^2
- ITER 4; i=n/2^3
- ITER k; i=n/2^k-1=1

- n/2^k-1 = 1
- n = 2^k-1
log 2 n = log 2 2^k-1
log 2 n = k-1
k = log 2 n + 1    -> SO, TIME COMPLEXITY = O(log 2 n)


# PROBLEM 1

- What is the time complexity of the following program?
void fun(int n){

 int i,j,k, count = 0;         //1 times; O(1)
 for(i=n/2;i<=n;i++){          //2n times;

  for(j=1;j+n/2<=n;j++){       //

   for(k=1;k<=n;k = k*2){      //

    count++;
   }
  }
 }
}

- ANSWER
first for loop

iter 1; i=n/2 + 0
iter 2: i=n/2 + 1

iter k: i=n/2 + k-1 = n

k - 1 = n - n/2
k - 1 = n/2
k = n/2 + 1     -> O(n)

second for loop
(j+n/2<=n)
(j<=n - n/2)
(k=j<=n/2)

iter 1; j=1
iter 2; j=2

iter k; j=k = n/2

k = n/2        -> O(n)

third for loop

iter 1; k=1 = 2^0
iter 2; k=2 = 2^1
iter 3; k=4 = 2^2

iter p; k=2^p-1=n

2^p-1 = n
log 2 2^p-1 = log 2 n
p-1 = log 2 n
p = (log 2 n) + 1  -> O(log n)

TIME COMPLEXITY
n x n x log n = O(n^2 log n)


# PROBLEM 1 part 2

- What is the time complexity of the following program?
void fun(int n){

 int i,j,k, count = 0;         //1 times; O(1)
 for(i=n/2;i<=n;i++){          //

  for(j=1;j<=n;2*j){       //

   for(k=1;k<=n;k = k++){      //

    count++;
   }
  }
 }
}

ANSWER

- first for loop
iter 1; i=n/2 + 0
iter 2; i=n/2 + 1

iter k; i=n/2 + k-1

k - 1 = n/2
k = n/2 + 1      -> O(n)

- second for loop
iter 1; j=1 2^0
iter 2; j=2 2^1
iter 3; j=4 2^2

iter k; j=2^k-1=n
log 2 2^k-1 = log 2 n
k-1 = log 2 n
k = log 2 n + 1  -> O(log n)

- third for loop
iter 1; k=1
iter 2; k=2
iter 3; k=3

iter p; k=p=n
p = n            -> O(n)

TIME COMPLEXITY
n x n x log n = O(n^2 log n)


# PROBLEM 2

void fun(int n){

 if(n <= 1){return}
 int i,j;                 ->O(1)
 for(i=1;i<=n;i++){       ->O(n)

  printf("Hello World");  ->O(1)
  break;
 }
}

TIME COMPLEXITY = O(n)


# PROBLEM 2 part 2

- What is the complexity of the following program

void fun(){

 int i = 1;            ->O(1)
 while(i<n){

  int j = n;           ->
  while(j>0){

   j = j / 2;
  }
  i = 2 * i;
 }
}

EXPLANATION:
first while loop
iter 1; i=1
iter 2; i=2*1
iter 3; i=2*2
iter 4; i=2*3

iter k; i=2*k-1=n-1

k-1=(n-1)/2
k=n/2-1/2+1     ->O(n)

second while loop
iter 1; j=j/2   ->O(1)

TIME COMPLEXITY
1x1xn = O(n)


# PROBLEM 3

- What is the time complexity of the following program?

void fun(){

 int i,j;                   ->O(1)
 for(i=1;i<n/3;i++){

  for(j=1;j<=n;j+=4){

   printf("Hello World");
  }
 }
}

EXPLANATION:
first for loop
iter 1; i=1
iter 2; i=2
iter 3; 1=3

iter k; i=k<n/3

k<n/3                     ->O(n)

second for loop
iter 1; j=1
iter 2; j=1+4
iter 3; j=1+4+4=1+2*4

iter k; j=1+(k-1)*4=n

k-1=n-1/4
k=(n-1/4)+1                     ->O(n)

TIME COMPLEXITY:

1xnxn = O(n2)
